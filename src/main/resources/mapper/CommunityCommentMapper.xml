<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.acorn.movielink.community.repository.CommunityCommentMapper">

    <!-- 댓글 DTO 매핑 -->
    <resultMap id="commentResultMap" type="com.acorn.movielink.community.dto.CommentDTO">
        <result column="comment_id" property="commentId"/>
        <result column="post_id" property="postId"/>
        <result column="mem_id" property="memId"/>
        <result column="parent_id" property="parentId"/>
        <result column="content" property="content"/>
        <result column="display_time" property="displayTime"/>
        <result column="comment_like_cnt" property="commentLikeCnt"/>
        <result column="mem_nn" property="memNn"/>
    </resultMap>

    <!-- 댓글 목록 조회 -->
    <select id="getCommentsByPostId" resultMap="commentResultMap" parameterType="int">
        SELECT
        c.comment_id,
        c.post_id,
        c.mem_id,
        c.parent_id,
        c.content,
        CASE
        WHEN c.comment_deleted_at IS NOT NULL THEN c.comment_deleted_at -- 삭제된 경우 삭제 시간
        WHEN c.comment_updated_at > c.comment_reg_at THEN c.comment_updated_at -- 수정된 경우 수정 시간
        ELSE c.comment_reg_at -- 기본 등록 시간
        END AS display_time, -- 최종 표시 시간
        c.comment_like_cnt,
        IFNULL(m.mem_nn, '알 수 없음') AS mem_nn
        FROM comment c
        LEFT JOIN member m ON c.mem_id = m.mem_id
        WHERE c.post_id = #{postId} -- 게시글 ID 기준
        AND c.parent_id IS NULL -- 최상위 댓글만 조회
        ORDER BY display_time DESC -- 최신순 정렬
    </select>

    <!-- 대댓글 목록 조회 -->
    <select id="getRepliesByParentId" resultMap="commentResultMap" parameterType="int">
        SELECT
        c.comment_id,
        c.post_id,
        c.mem_id,
        c.parent_id,
        c.content,
        CASE
        WHEN c.comment_deleted_at IS NOT NULL THEN c.comment_deleted_at
        WHEN c.comment_updated_at > c.comment_reg_at THEN c.comment_updated_at
        ELSE c.comment_reg_at
        END AS display_time,
        c.comment_like_cnt,
        IFNULL(m.mem_nn, '알 수 없음') AS mem_nn
        FROM comment c
        LEFT JOIN member m ON c.mem_id = m.mem_id
        WHERE c.parent_id = #{parentId} -- 부모 댓글 ID 기준
        ORDER BY display_time ASC -- 오래된 순 정렬
    </select>

    <!-- 댓글 작성 (최상위 댓글) -->
    <insert id="addComment" parameterType="map" useGeneratedKeys="true" keyProperty="commentId">
        INSERT INTO comment (post_id, mem_id, parent_id, content, comment_reg_at)
        VALUES (#{postId}, #{memId}, NULL , #{content}, NOW());
    </insert>

    <!-- 대댓글 작성 -->
    <insert id="addReply" parameterType="com.acorn.movielink.community.dto.CommentDTO" useGeneratedKeys="true" keyProperty="commentId">
        INSERT INTO comment (post_id, mem_id, parent_id, content, comment_reg_at)
        VALUES (#{postId}, #{memId}, #{parentId}, #{content}, NOW());
    </insert>

<!--    작성 후 해당 댓글 조회-->
    <select id="getCommentById" resultMap="commentResultMap" parameterType="int">
        SELECT
        c.comment_id,
        c.post_id,
        c.mem_id,
        c.parent_id,
        c.content,
        CASE
        WHEN c.comment_deleted_at IS NOT NULL THEN c.comment_deleted_at
        WHEN c.comment_updated_at > c.comment_reg_at THEN c.comment_updated_at
        ELSE c.comment_reg_at
        END AS display_time,
        c.comment_like_cnt,
        IFNULL(m.mem_nn, '알 수 없음') AS mem_nn
        FROM comment c
        LEFT JOIN member m ON c.mem_id = m.mem_id
        WHERE c.comment_id = #{commentId}
    </select>


<!-- 댓글 존재 여부 확인-->
    <select id="countCommentById" parameterType="int">
        SELECT COUNT(*)
        FROM comment
        WHERE comment_id = #{commentId} AND comment_deleted_at IS NULL
    </select>


<!--   댓글 작성자 검증-->
    <select id="getAuthorByCommentId" parameterType="int">
        SELECT mem_id
        FROM comment
        WHERE comment_id = #{commentId} AND comment_deleted_at IS NULL
    </select>

    <!--   부모 댓글 찾기-->
    <select id="findParentIdById" parameterType="int">
        SELECT parent_id
        FROM comment
        WHERE comment_id = #{commentId};
    </select>

    <!-- 댓글 수정 -->
    <update id="updateComment" parameterType="com.acorn.movielink.community.dto.CommentDTO">
        UPDATE comment
        SET content = #{content},
        comment_updated_at = NOW()
        WHERE comment_id = #{commentId}
        AND mem_id = #{memId}
        AND comment_deleted_at IS NULL;
    </update>


    <!-- 대댓글 수정 -->
    <update id="updateReply" parameterType="com.acorn.movielink.community.dto.CommentDTO">
        UPDATE comment
        SET content = #{content},
        comment_updated_at = NOW()
        WHERE comment_id = #{commentId}
        AND mem_id = #{memId}
        AND comment_deleted_at IS NULL;
    </update>

    <!-- 댓글 논리 삭제 -->
    <update id="deleteComment" parameterType="int">
        UPDATE comment
        SET comment_deleted_at = NOW()
        WHERE comment_id = #{commentId}
        AND mem_id = #{memId};
    </update>
    <!-- 대댓글 개별 삭제 -->
    <update id="deleteReply" parameterType="int">
        UPDATE comment
        SET comment_deleted_at = NOW()
        WHERE comment_id = #{commentId}
        AND parent_id IS NOT NULL -- 대댓글 여부 검증
        AND mem_id = #{memId};    -- 작성자 검증
    </update>


    <!-- 댓글 좋아요 증가 -->
    <update id="increaseLikeCount" parameterType="int">
        UPDATE comment
        SET comment_like_cnt = comment_like_cnt + 1
        WHERE comment_id = #{commentId};
    </update>

    <!-- 댓글 좋아요 감소 -->
    <update id="decreaseLikeCount" parameterType="int">
        UPDATE comment
        SET comment_like_cnt = comment_like_cnt - 1
        WHERE comment_id = #{commentId} AND comment_like_cnt > 0;
    </update>

</mapper>
